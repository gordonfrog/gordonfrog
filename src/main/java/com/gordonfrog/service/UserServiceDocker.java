package com.gordonfrog.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Service;

import com.gordonfrog.model.User;
import com.gordonfrog.repository.UserCRUDRepository;

//Services should wire in Repository objects to a persistent store
//using the UserDataStub as a stand-in for a db representation - Guru
@Service
@Profile("docker")
public class UserServiceDocker implements UserService {
	
	@Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
	private UserCRUDRepository userRepository;

	@Override
	public List<User> getAllUsers() {
		return (List<User>) userRepository.findAll();
	}

	@Override
	public User getUser(Integer id) {
		return userRepository.findById(id).get();
	}

	@Override
	public User save(User user) {
		return userRepository.save(user);
	}

	@Override
	public User update(Integer id, User user) {
		User savedUser = userRepository.findById(id).get();
		if (user.getDepartment() != null && !user.getDepartment().isEmpty())
			savedUser.setDepartment(user.getDepartment());
		if (user.getName() != null && !user.getName().isEmpty())
			savedUser.setName(user.getName());
		if (user.getTitle() != null && !user.getTitle().isEmpty())
			savedUser.setTitle(user.getTitle());	    
		return userRepository.save(savedUser);
	}

	@Override
	public void delete(Integer id) {
		userRepository.deleteById(id);
		
	}

	@Override
	public User findUserByName(String name) {
		return userRepository.findByName(name);
	}

}
